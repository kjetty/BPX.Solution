@model BPX.Domain.ViewModels.RoleViewModel

@using BPX.Utils;
@using BPX.Website.CustomCode.Authorize;
@using System.Reflection;

@{
	ViewData["Title"] = "Role Read";
}

<div class="row">
	<div class="col-md-12">
		<h5>@ViewBag.Title</h5>
	</div>
</div>

<p></p>
<hr />

<div>
	<dl class="row">
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.RoleName)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.RoleName) &nbsp;
		</dd>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.RoleDescription)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.RoleDescription) &nbsp;
		</dd>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.StatusFlag)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.StatusFlag)

			@{
				var recordStatus = typeof(RecordStatus).GetFields(BindingFlags.Static | BindingFlags.Public);

				foreach (var item in recordStatus)
				{
					if (Model.StatusFlag == item.GetRawConstantValue().ToString())
					{
						@Html.Raw("&nbsp;(" + @item.Name + ")");
					}
				}
			}
			&nbsp;
		</dd>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.ModifiedBy)
		</dt>
		<dd class="col-sm-10">
			@ViewBag.modifiedByName &nbsp;
		</dd>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.ModifiedDate)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.ModifiedDate) &nbsp;
		</dd>
	</dl>
</div>
<div>
	@if (((List<int>)ViewBag.currUserPermitIds).Contains(Permits.Identity.Role.Update))
	{
		<a asp-area="Identity" asp-action="Update" asp-route-id="@Model.RoleId">Edit</a> @Html.Raw("&nbsp;&nbsp;|&nbsp;&nbsp;")
	}
	@if (((List<int>)ViewBag.currUserPermitIds).Contains(Permits.Identity.Role.List))
	{
		<a asp-area="Identity" asp-action="Index">Back to List</a>
	}
</div>